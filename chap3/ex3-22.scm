(define (make-queue)
  (define lst '())
  (define rear-ptr '())
  (define (empty-queue?) (null? lst))
  (define (delete-queue)
    (if (empty-queue?)
      (error "DELETE! called with an empty queue")
      (set! lst (cdr lst))))
  (define (insert-queue item)
    (let ((new-pair (cons item '())))
      (if (empty-queue?)
        (begin
          (set! lst new-pair)
          (set! rear-ptr lst)
          )
        (begin
          (set-cdr! rear-ptr new-pair)
          (set! rear-ptr new-pair)
          ))))
  (define (dispatch m)
    (cond
      ((eq? m 'insert-queue!) insert-queue)
      ((eq? m 'delete-queue!) delete-queue)
      ((eq? m 'print-queue)   lst)
      (else (error "no method call" m)))
    )
  dispatch)

(define (insert-queue! queue  item)
  ((queue 'insert-queue!) item))
(define (delete-queue! queue)
  ((queue 'delete-queue!)))
(define (print-queue queue)
  (queue 'print-queue))

(define q (make-queue))
(insert-queue! q 1)
(insert-queue! q 2)
(insert-queue! q 3)
(insert-queue! q 4)
(insert-queue! q 5)
(insert-queue! q 6)
(insert-queue! q 7)
(insert-queue! q 8)
(insert-queue! q 9)
(print-queue q)
(delete-queue! q) (print-queue q)
(delete-queue! q) (print-queue q)
(delete-queue! q) (print-queue q)
(delete-queue! q) (print-queue q)
(delete-queue! q) (print-queue q)
(delete-queue! q) (print-queue q)
(delete-queue! q) (print-queue q)
(delete-queue! q) (print-queue q)
(delete-queue! q) (print-queue q)
